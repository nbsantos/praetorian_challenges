#!wing
#!version=7.0
##################################################################
# Wing project file                                              #
##################################################################
[project attributes]
proj.directory-list = [{'dirloc': loc('.'),
                        'excludes': (),
                        'filter': u'*',
                        'include_hidden': False,
                        'recursive': True,
                        'watch_for_changes': True}]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('mastermind.py'): {68L: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('mastermind.py'): {}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'zx8GQENIPv35wSRpBB9Qr4A1qW'\
        'uO9w4D',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(1,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [2,
                          5],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 75L,
                       'folded-linenos': [],
                       'history': {u'file:/home/nelson/Workspace/praetorian_challenges/mastermind/mastermind.py': ['M'\
        'astermind.score(m.S[0], guess)\n',
        '[s for s in self.S if Mastermind.score(s, guess) == resp]\n',
        'resp\n',
        'self.S\n',
        'guess\n',
        'Mastermind.score((2, 3, 1, 4), (3, 1, 6, 2))\n',
        'm.S\n',
        'product(range(gladiators), repeat=2)\n',
        'list(product(range(gladiators), repeat=2))\n',
        'list(product(range(gladiators + 1), repeat=2))\n',
        'Mastermind.score((1, 2, 3, 4), (2, 5, 1, 0))\n',
        'Mastermind.score((2, 6, 1, 4), (2, 5, 1, 0))\n',
        'm.scoreset_counts[(2, 0)]\n',
        'm.scoreset_counts[(1, 0)]\n',
        'len(m.S)\n',
        'len(m.possible_guesses)\n',
        'm.scoreset_counts[(0, 1)]\n',
        'm.scoreset_counts[(0, 0\\)]\n',
        'm.scoreset_counts[(0, 0)]\n',
        'self.scoreset_counts[Mastermind.score(pg, s)]\n',
        'Mastermind.score(pg, s)\n',
        'm.scoreset_counts\n']},
                       'launch-id': None,
                       'sel-line': 81L,
                       'sel-line-start': 261665L,
                       'selection_end': 261665L,
                       'selection_start': 261665L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('symbolic',
        ['m',
         'scoreset_counts',
         '(0, 0)']),
                                       ('symbolic',
        ['m',
         'scoreset_counts',
         '(3, 1)'])],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 30L,
                       'folded-linenos': [],
                       'history': {None: ['import itertools\n',
        'list(itertools.permutations(4, 4))\n',
        'list(itertools.permutations(range(5), 4))\n',
        'list(itertools.permutations(range(5), 2))\n',
        'list(itertools.product(range(5), 2))\n',
        'list(itertools.combinations(range(5), 2))\n',
        'list(itertools.combinations_with_replacement(range(5), 2))\n',
        'list(itertools.product(range(5), repeat=2))\n',
        '[s for s in itertools.product(range(5), repeat=2) if s[0] + s[1] <='\
        ' 4]\n',
        '{s:0 for s in itertools.product(range(5), repeat=2) if s[0] + s[1] '\
        '<= 4}\n',
        'from itertools import product\n',
        '[(s, 0) for s in product(range(4 + 1), repeat=2)]\n']},
                       'launch-id': None,
                       'sel-line': 37L,
                       'sel-line-start': 4236L,
                       'selection_end': 4236L,
                       'selection_start': 4236L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../../../../usr/lib/wingpro7/doc/TOC'),
        {'displayed-index': -1,
         'viewer-state': {'history': [-1,
                                      0],
                          'history-pos': 0,
                          'index': -1,
                          'top': 0,
                          'top-left-pos': 0}},
        1618799282.219669],
        [loc('../../../../../usr/lib/wingpro7/doc/TOC'),
         {'displayed-index': 0,
          'viewer-state': {'history': [-1,
                                       0],
                           'history-pos': 1,
                           'index': 0,
                           'top': 0,
                           'top-left-pos': 0}},
         1618799314.631097],
        [loc('mastermind.py'),
         {'attrib-starts': [],
          'code-line': '\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 39L,
          'selection_end': 39L,
          'selection_start': 39L,
          'zoom': 0L},
         1618799352.786013],
        [loc('mastermind.py'),
         {'attrib-starts': [],
          'code-line': '\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 555L,
          'selection_end': 555L,
          'selection_start': 555L,
          'zoom': 0L},
         1618836861.301755],
        [loc('mastermind.py'),
         {'attrib-starts': [],
          'code-line': '',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1618836987.356321],
        [loc('mastermind.py'),
         {'attrib-starts': [],
          'code-line': "    This is different from the original Knuth algori"\
                       "thm,since this game uses permutations instead of pro"\
                       "ducts.'''",
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 98L,
          'selection_end': 154L,
          'selection_start': 154L,
          'zoom': 0L},
         1618837001.387173],
        [loc('mastermind.py'),
         {'attrib-starts': [('create_set|0|',
                             3)],
          'code-line': '    \n',
          'first-line': 1L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 238L,
          'selection_end': 242L,
          'selection_start': 242L,
          'zoom': 0L},
         1618837036.498335],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [],
          'code-line': '    S = list(map(list, permutations(\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 39L,
          'sel-line-start': 997L,
          'selection_end': 1102L,
          'selection_start': 1005L,
          'zoom': 0L},
         1618837051.501148],
        [loc('mastermind.py'),
         {'attrib-starts': [('generate_set|0|',
                             3)],
          'code-line': '',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 18L,
          'sel-line-start': 489L,
          'selection_end': 489L,
          'selection_start': 489L,
          'zoom': 0L},
         1618837809.320185],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [],
          'code-line': '    S = list(map(list, permutations(\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 39L,
          'sel-line-start': 997L,
          'selection_end': 1102L,
          'selection_start': 1005L,
          'zoom': 0L},
         1618837811.846864],
        [loc('mastermind.py'),
         {'attrib-starts': [('generate_set|0|',
                             4)],
          'code-line': '    S = list(map(list, S))\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 504L,
          'selection_end': 530L,
          'selection_start': 530L,
          'zoom': 0L},
         1618838108.78636],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [],
          'code-line': 'v\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 65L,
          'selection_end': 66L,
          'selection_start': 66L,
          'zoom': 0L},
         1618838116.707275],
        [loc('mastermind.py'),
         {'attrib-starts': [('generate_set|0|',
                             4)],
          'code-line': '    S = list(map(list, S))\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 504L,
          'selection_end': 530L,
          'selection_start': 530L,
          'zoom': 0L},
         1618838117.76972],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [('_score|0|',
                             5)],
          'code-line': 'def _score(guess, code):\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 65L,
          'selection_end': 242L,
          'selection_start': 65L,
          'zoom': 0L},
         1618838119.83333],
        [loc('mastermind.py'),
         {'attrib-starts': [('_score|0|',
                             26)],
          'code-line': 'def _score(guess: Guess, code: Guess) -> Score:\n',
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 26L,
          'sel-line-start': 628L,
          'selection_end': 674L,
          'selection_start': 674L,
          'zoom': 0L},
         1618838487.222674],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [('prune|0|',
                             15)],
          'code-line': 'def prune(guess, S, resp):\n',
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 15L,
          'sel-line-start': 245L,
          'selection_end': 492L,
          'selection_start': 245L,
          'zoom': 0L},
         1618838494.618853],
        [loc('mastermind.py'),
         {'attrib-starts': [('prune|0|',
                             26)],
          'code-line': '\n',
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 35L,
          'sel-line-start': 923L,
          'selection_end': 923L,
          'selection_start': 923L,
          'zoom': 0L},
         1618839959.271079],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [('prune|0|',
                             15)],
          'code-line': "    '''Remove from S any code that would not give th"\
                       "e same response if it (the guess) were the code.'''"\
                       "\n",
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 272L,
          'selection_end': 340L,
          'selection_start': 340L,
          'zoom': 0L},
         1618839996.11184],
        [loc('mastermind.py'),
         {'attrib-starts': [('prune|0|',
                             26)],
          'code-line': '\n',
          'first-line': 15L,
          'folded-linenos': [],
          'sel-line': 35L,
          'sel-line-start': 923L,
          'selection_end': 923L,
          'selection_start': 923L,
          'zoom': 0L},
         1618840002.552287],
        [loc('mastermind_orig.py'),
         {'attrib-starts': [('prune|0|',
                             15)],
          'code-line': "    '''Remove from S any code that would not give th"\
                       "e same response if it (the guess) were the code.'''"\
                       "\n",
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 272L,
          'selection_end': 340L,
          'selection_start': 340L,
          'zoom': 0L},
         1618840009.536843]],
        20),
        'current-loc': loc('mastermind.py'),
        'editor-state-list': [(loc('mastermind.py'),
                               {'attrib-starts': [('Mastermind|0|',
        10),
        ('Mastermind|0|.prune|0|',
         29)],
                                'code-line': '        self.S = [s for s in s'\
        'elf.S if Mastermind.score(s, guess) == resp]\n',
                                'first-line': 18L,
                                'folded-linenos': [],
                                'sel-line': 33L,
                                'sel-line-start': 932L,
                                'selection_end': 1006L,
                                'selection_start': 1006L,
                                'zoom': 0L}),
                              (loc('mastermind_orig.py'),
                               {'attrib-starts': [('prune|0|',
        15)],
                                'code-line': "    '''Remove from S any code "\
        "that would not give the same response if it (the guess) were the co"\
        "de.'''\n",
                                'first-line': 3L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 272L,
                                'selection_end': 340L,
                                'selection_start': 340L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('mastermind.py'),
         loc('mastermind_orig.py')]),
                               'open_files': [u'mastermind_orig.py',
        u'mastermind.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((1,
                           5),
                          1618846925.893894),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    0),
                                   1618799281.858244),
                 'user_data': {}},
        'window-alloc': (100,
                         42,
                         1479,
                         982)}]}
guimgr.recent-documents = [loc('mastermind.py'),
                           loc('mastermind_orig.py')]
guimgr.visual-state = {loc('mastermind.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('activate',
                      '/home/nelson/.local/share/virtualenvs/mastermind-bq_Q'\
                      'Ra2M/bin/activate')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
testing.stored-results = (1,
                          [],
                          {})
